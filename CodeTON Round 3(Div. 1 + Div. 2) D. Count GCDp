#include<bits/stdc++.h>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

#define ll      long long int
const int mod  = (int)998244353;

ll Inclusion_Exclusion(int val,int totalPos)
{

    vector<ll>primeFactors;

    for(int i=2;i*i<=val;i++)
    {
        if(val%i==0)
        {
            primeFactors.push_back(i);
            while(val%i==0) val /= i;
        }
    }

    if(val>1) primeFactors.push_back(val);

    ll res =0;

    for(int mask=0;mask<(1 << (int)primeFactors.size());mask++)
    {
        ll x = 1;
        int cnt=0;

        for(int i=0;i<primeFactors.size();i++)
        {
            if(mask & (1<<i))
            {
                cnt++;
                x*= primeFactors[i];
            }
        }

        ll div = (totalPos/x);

        if(cnt%2==0) res += div;
        else res -= div;
    }

    return res;
}

int main()
{
    optimize();
    int t;
    cin>>t;
    while(t--)
    {
        int n,i;
        ll m;
        cin>>n>>m;
        vector<ll> a(n);

        for(i=0;i<n;i++) cin>>a[i];

        bool impossible = false;
        
        for(i=1;i<n;i++)
        {
            if(a[i-1]%a[i]!=0)
            {
                impossible = true;
                break;
            }
        }

        if(impossible)
        {
            cout<<0<<endl;
            continue;
        }

        ll ans = 1;

        for(i=1;i<n;i++)
        {
            if(a[i-1]==a[i])
            {
                ans *= (m/a[i]);
                ans%= mod;
            }
            else
            {
                ans *= Inclusion_Exclusion( a[i-1]/a[i] , m/a[i]);
                ans%= mod;
            }
        }

        cout<<ans<<endl;
    }
    return 0;
}
